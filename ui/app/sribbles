// Similar to componentDidMount and componentDidUpdate:
useEffect(() => {
    // First, we need to create an instance of EventSource and pass the data stream URL as a
    // parameter in its constructor
    const es = new EventSource("http://localhost:3000/api/v1/stream");
    // Whenever the connection is established between the server and the client we'll get notified
    es.onopen = () => console.log(">>> Connection opened!");
    // Made a mistake, or something bad happened on the server? We get notified here
    es.onerror = (e) => console.log("ERROR!", e);
    // This is where we get the messages. The event is an object and we're interested in its `data` property
    es.onmessage = (e) => {
        console.log(">>>", e.data);

        var jdata: dataType = JSON.parse(e.data);

        var newData: dataType = {
            value: e.data.value,
            timestamp: new Date("2024-04-13T18:34:48.216600Z"),
            channel: 1,
        }

        setData([ // with a new array
            jdata, // that contains all the old items
            ...data // and one new item at the end
        ]);
        console.log(">>>", data);

    };
    // Whenever we're done with the data stream we must close the connection
    return () => es.close();
});

<ResponsiveContainer width="100%" height = "100%" >
    <LineChart
      width={ 500 }
height = { 300}
data = { chartData }
margin = {{
    top: 5,
        right: 30,
            left: 20,
                bottom: 5,
      }}
  >
    <CartesianGrid strokeDasharray="3 3" />
        <XAxis
          domain={ ['auto', 'auto'] }
name = "Time"
tickFormatter = { time => moment(time).format('MM/DD HH:mm') }
reversed = { true}
dataKey = "timestamp"
    />
    <YAxis />
    < Tooltip labelFormatter = { time => moment(time).format('DD/MM HH:mm:SS') } />
        <Legend />
        < Line type = "monotone" dataKey = "value" stroke = "#8884d8" activeDot = {{ r: 8 }} />
            < /LineChart>
            < /ResponsiveContainer>